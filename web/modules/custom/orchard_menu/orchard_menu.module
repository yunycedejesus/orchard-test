<?php

/**
 * @file
 * Custom hooks for Orchard Menu.
 */

/**
 * Implements hook_theme_suggestions_alter().
 */
// function orchard_menu_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

//   dump($variables);
//   if (is_array($variables) && array_key_exists("theme_hook_original", $variables) && ($variables['theme_hook_original'] == "node")) {
//     // dump($variables);
//     $suggestions[] = $hook . '__orchard_menu__';
//   }
// }

/**
 * Implements hook_theme().
 */
function orchard_menu_theme($existing, $type, $theme, $path) {
  return [
    'page__node' => [
      'base hook' => 'page',
      'template' => 'page--node'
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function orchard_menu_preprocess_page(&$variables) {
  if (array_key_exists("node", $variables)) {
    $variables['main_menu_parent_link'] = _get_parent_menu_links($variables['node']);
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
// function orchard_menu_preprocess_node(&$variables) {
//   $variables['node'] = $variables['elements']['#node'];
//   $variables['main_menu_parent_link'] = _get_parent_menu_links($variables['node']);
// }

/**
 * Get parent menu links for current node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param string $menu
 *   Menu machine name
 *
 * @return array
 *   Either empty array or array with parent links.
 */
function _get_parent_menu_links($node, $menu = 'main'): array {
  $parent_links = [];

  // Loading needed services.
  $active_trail = \Drupal::service('menu.active_trail');
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  // Getting menu link entity from current route.
  $menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node->id()));

  if ($menu_links) {
    $menu_link = reset($menu_links);

    if ($menu_link->getTitle() == 'Root A' || $menu_link->getTitle() == 'Root B') {
      $parent_links[] = [
        'has_bg' => true,
        'title' => $menu_link->getTitle(),
      ];
    } else {
      // We need this to avoid having current node link in parent links array.
      $current_plugin_id = $menu_link->getPluginId();

      // Getting active trail array.
      $trail_ids = $active_trail->getActiveTrailIds($menu);

      foreach (array_reverse($trail_ids) as $value) {

        if ($value && $value !== $current_plugin_id) {
          $link_instance = $menu_link_manager->createInstance($value);

          $parent_links[] = [
            'has_bg' => true,
            'title' => $link_instance->getTitle(),
          ];
        }
      }
    }
  }

  return $parent_links;
}